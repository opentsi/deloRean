---
title: "Alfred Package Research"
author: "Minna Heim"
date: today
---
### Set up
```{r, setup, message = F}
library(zoo)
library(alfred)
library(tidyverse)
library(forecast)
library(ggplot2)
library(fpp3)
```

### Import & Inspect Alfred Data
There are only 2 functions `get_alfred_data` and `get_fred_data` which extract the data from the (al)fred  websites with the help of their API. 

```{r, import}
# need to transform this to monthly so that as_tsibble understands this is monthly

cpi <- get_alfred_series(
    series_id = "CPIAUCSL",
    series_name = "cpi",
    observation_start = "2012-01-01",
    observation_end = "2017-01-01",
    realtime_start = "2017-01-01",
    realtime_end = "2024-08-16"
)
cpi <- cpi |> filter(realtime_period %in% c("2017-01-01", "2024-08-16"))
head(cpi)
```

### Check differences in Versions
```{r, check differences}
# check how many values are different, in 2017-01-01 vs. 2024-08-14
check_revisions <- function(ts) {
    # hier verallgemeinern - nicht nur dieses datum
    filtered_ts <- ts |> filter(ts$realtime_period == "2017-01-01")
    df <- setNames(
        data.frame(matrix(ncol = 2, nrow = nrow(filtered_ts))),
        c("date", "difference")
    )

    for (i in seq_len(nrow(filtered_ts))) {
        d <- filtered_ts$date[i]
        difference_df <- ts |> filter(date == d)
        dist <- difference_df$cpi[1] - difference_df$cpi[2]
        df$date[i] <- strftime(d)
        df$difference[i] <- dist
    }
    return(df)
}

revisions <- check_revisions(cpi)
head(revisions)

```

### Clean time series data
```{r, clean data}
# can't remove ex-index if data is in as_tsibble because it still counts it as index, so need to transform this back to tibble & then tsibble again
# isn't there a smoother way to do this?
cpi_monthly <- cpi |>
    as_tsibble(key = realtime_period, index = date) |>
    tsibble::index_by(year_month = ~ yearmonth(.)) |>
    as_tibble() |>
    select(-date) |>
    as_tsibble(key = realtime_period, index = year_month)

head(cpi_monthly)
```

Here we have the entire values of the Consumer Price Index (All Urban Consumers) from 2000-01-01 until 2024-07-01 in the two versions: 2024-07-14 and 2024-08-14.

There seems to be little to no data documentation, no descrioptions of units, or structure. Probably because to find the ID, one needs to go to the [alfred website of the CPI](https://alfred.stlouisfed.org/series?seid=CPIAUCSL) where all information is present: 

### Visualize Data
```{r, visualize}
# simple autoplot
autoplot <- autoplot(cpi_monthly)
autoplot

# using feasts
cpi_season <- cpi_monthly |> gg_season()
cpi_season

# Plot both versions to see differences
plot <- cpi_monthly |>
    ggplot(aes(x = year_month, y = cpi, color = realtime_period)) +
    geom_line() +
    labs(
        title = "Consumer Price Index (CPI) - Comparison of Realtime Periods",
        x = "Year-Month",
        y = "CPI",
        color = "Realtime Period"
    ) +
    theme_minimal()

plot

```

Plotting the time series shows some sort of (linear) trend, and no visible seasonality.

### Forecast with 2017 version
```{r}
# split acc to 2024,2017
cpi_2017 <- cpi |>
    filter(realtime_period == "2017-01-01") |>
    select(-realtime_period)

# decompose time series to remove linear trend
# view(cpi_2017)
cpi_2017 <- cpi_2017 |> select(-date)
cpi_2017 <- ts(cpi_2017)

plot(cpi_2017)


cpi_2017 <- diff(cpi_2017)
plot(cpi_2017)

# looks stationary - no trend, no seasonality
acf(cpi_2017) # ACF shows MA(1)
pacf(cpi_2017) # PACF indicates AR(1)



# fit arma(1,1) to model?
fit <- arima(cpi_2017, order = c(1, 0, 1))
fit
fit_2 <- arima(cpi_2017, order = c(3, 0, 3))
fit_2
fit_3 <- arima(cpi_2017, order = c(3, 0, 1))
fit_3

cpi_fit <- cpi_2017 - residuals(fit)
cpi_fit_2 <- cpi_2017 - residuals(fit_2)
cpi_fit_3 <- cpi_2017 - residuals(fit_3)
# check residuals
checkresiduals(cpi_fit) # residuals clearly arent iid
checkresiduals(cpi_fit_2)
checkresiduals(cpi_fit_3)

# AIC shows fit 3 is best
# compare with (p)acf
acf(cpi_fit_3)
pacf(cpi_fit_3)

# automated arima shows:
aa <- auto.arima(cpi_2017)
aa
checkresiduals(aa)

# forecast cannot do, too little data points i assume...
autoplot(forecast(cpi_fit_3))
autoplot(forecast(aa))
```

using the automated arima shows that the cpi can be best fitted using a MA(1) model, and the forecast window is smaller, still given few datapoints, not more can be done here.
 
### Forecast with 2024 version
```{r}
cpi_2024 <- cpi |>
    filter(realtime_period == "2024-08-16") |>
    select(-realtime_period)
cpi_2024 <- cpi_2024 |> select(-date)
cpi_2024 <- ts(cpi_2024)
plot(cpi_2024)
cpi_2024 <- diff(cpi_2024)
aa <- auto.arima(cpi_2024)
aa
checkresiduals(aa)
```

Interesting is that with the revised data from 2024-08-16, the coefficient is estimated differently, from 0.34 to 0.39, so significant changes for small data sample.

### LEARNINGS FOR OPENTIMESERIES: 
it would be good to not include time frames for realtime_starts/end but to do this with a specific version -> i.e. to use the cpi data from 2000-2014 to predict 2015 incl. vintages, i need the realtime data from 2014-01-01 and 2024-08-14, nothing in between

-> revisions only go back 5 years, so keep all revisions from years prior in case you want to go back further than 5 years..
e.g.: observation_end =   "2010-01-01","2022-01-01", realtime_start = "2022-01-01", realtime_end = "2024-08-16" -> revisions start 2017-01-01 
<!-- revisions only started from 2010-01-01 onwards
depending on the realtime start, some data is not revised at all, and others is:
with observation_end =   "2010-01-01","2020-01-01", realtime_start = "2020 -01-01", realtime_end = "2024-08-16" -> revisions start 2015-01-01... -->

### Data Documentation Insights
```{r}
# try out alfred package, to see how the dataset documentation looks like:

library(alfred)
indpro <- get_alfred_series("INDPRO", observation_start = "2000-01-01", realtime_start = "2000-01-01")
head(indpro)
tail(indpro)
```

Here, data documentation non-existent (no desc. of data, ID, structure, etc.) -> probably because everythhing is available on their website anyhow...

```{r}
# time series data packages
library(forecast)
head(gas)
head(gold)
?gas # shows description but without units?, no sources
?gold # described better, no source

# ?flights #shows desciptions of dataset and source

#  vintages output (how does ALFRED handle output)
head(indpro)
tail(indpro)
```

here, similar no sources or data descriptions, but most likely because everything can be found in the documentation or vignettes... 

**for opentimeseries especially: deloRean** similarly, we should provide requirements of what information and data descriptions should be disclosed in the readme in the data archives, aka what the deloRean user needs to disclose themselves, so that like in forecast and alfred, people know that they can find the information somewhere. Additionally, in the function description we can disclose that the data descriptions can be found in the readme's.


### Vintage Usage Insights

In alfred different versions are just concatenated, is straightforward but unsuitable for our storage via git, so our way is the easiest. 